# -*- coding: utf-8 -*-
"""sesi04_newton_raphson.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17kHSJ8YhPTlAI3ILD-yXwWZB7kdIDbS_
"""

import numpy as np
f = lambda x: x**2 - 2
f_prime = lambda x: 2*x
newton_raphson = 1.4 - (f(1.4)) / (f_prime(1.4))

print("newton_raphson = ", newton_raphson)
print("sqrt(2) = ",np.sqrt(2))

def my_newton(f,df,x0,tol):
  # output is an estimation of the root of f using the newton raphson method
  # recursive method implementation

  if abs(f(x0)) < tol:
    return x0
  else:
    return my_newton(f,df,x0 - f(x0) / df(x0),tol)

"""Quiz 1 newton raphson
f(x) = x^3 - 3x^2 + 2x
x0 = 1.5
tol = 0.001

"""

def f(x):
    return x**3 - 3*x**2 + 2*x

def f_prime(x):
    return 3*x**2 - 6*x + 2

def newton_raphson(x0, tol):
    iterasi = 0
    while True:
        x1 = x0 - f(x0) / f_prime(x0)
        iterasi += 1
        if abs(x1 - x0) < tol:
            return x1, iterasi
        x0 = x1

# Menentukan tebakan awal dan toleransi
x0 = 1.5
tol = 0.001

# Menjalankan metode Newton-Raphson
akar, iterasi = newton_raphson(x0, tol)
print("Akar dari fungsi adalah:", akar)
print("Iterasi yang diperlukan:", iterasi)

"""Quiz 2
f(x) e^x - 2x

"""

import math

def f(x):
    return math.exp(x) - 2*x

def f_prime(x):
    return math.exp(x) - 2

def newton_raphson(x0, tol):
    iterasi = 0
    while True:
        x1 = x0 - f(x0) / f_prime(x0)
        iterasi += 1
        if abs(x1 - x0) < tol:
            return x1, iterasi
        x0 = x1

# Menentukan tebakan awal dan toleransi
x0 = 1.5
tol = 0.001

# Menjalankan metode Newton-Raphson
akar, iterasi = newton_raphson(x0, tol)
print("Akar dari fungsi adalah:", akar)
print("Iterasi yang diperlukan:", iterasi)